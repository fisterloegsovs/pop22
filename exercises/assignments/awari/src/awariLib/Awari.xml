<Type Name="Awari" FullName="Awari">
  <TypeSignature Language="C#" Value="public static class Awari" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Awari extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>awariLib</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="distribute">
      <MemberSignature Language="C#" Value="public static Tuple&lt;Microsoft.FSharp.Collections.FSharpList&lt;int&gt;,Awari.player,int&gt; distribute (Microsoft.FSharp.Collections.FSharpList&lt;int&gt; b, Awari.player p, int i);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Tuple`3&lt;class Microsoft.FSharp.Collections.FSharpList`1&lt;int32&gt;, Awari/player, int32&gt; distribute(class Microsoft.FSharp.Collections.FSharpList`1&lt;int32&gt; b, Awari/player p, int32 i) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;Microsoft.FSharp.Collections.FSharpList&lt;System.Int32&gt;,Awari+player,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="Microsoft.FSharp.Collections.FSharpList&lt;System.Int32&gt;" />
        <Parameter Name="p" Type="Awari+player" />
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="b">The present statu of the board</param>
        <param name="p">The player, whos beans to distribute</param>
        <param name="i">The regular pit to distribute</param>
        <summary>
 Distributing beans counter clockwise, capturing when relevant
 </summary>
        <returns>A new board after the beans of pit i has been distributed, and which player's pit the last bean landed in</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="getMove">
      <MemberSignature Language="C#" Value="public static int getMove (Microsoft.FSharp.Collections.FSharpList&lt;int&gt; b, Awari.player p, string q);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 getMove(class Microsoft.FSharp.Collections.FSharpList`1&lt;int32&gt; b, Awari/player p, string q) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="Microsoft.FSharp.Collections.FSharpList&lt;System.Int32&gt;" />
        <Parameter Name="p" Type="Awari+player" />
        <Parameter Name="q" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="b">The board the player is choosing from</param>
        <param name="p">The player, whose turn it is to choose</param>
        <param name="q">The string to ask the player</param>
        <summary>
 Get the pit of next move from the user
 </summary>
        <returns>The pit the player has chosen</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="isGameOver">
      <MemberSignature Language="C#" Value="public static bool isGameOver (Microsoft.FSharp.Collections.FSharpList&lt;int&gt; b);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool isGameOver(class Microsoft.FSharp.Collections.FSharpList`1&lt;int32&gt; b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="Microsoft.FSharp.Collections.FSharpList&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="b"> A board to check</param>
        <summary>
 Check whether the game is over
 </summary>
        <returns>True if either side has no beans</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="isHome">
      <MemberSignature Language="C#" Value="public static bool isHome (Microsoft.FSharp.Collections.FSharpList&lt;int&gt; b, Awari.player p, int i);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool isHome(class Microsoft.FSharp.Collections.FSharpList`1&lt;int32&gt; b, Awari/player p, int32 i) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="Microsoft.FSharp.Collections.FSharpList&lt;System.Int32&gt;" />
        <Parameter Name="p" Type="Awari+player" />
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="b">A board to check</param>
        <param name="p">The player, whos home to check</param>
        <param name="i">A regular or home pit of a player</param>
        <summary>
 Check wether a pit is the player's home
 </summary>
        <returns>True if either side has no beans</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="play">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Collections.FSharpList&lt;int&gt; play (Microsoft.FSharp.Collections.FSharpList&lt;int&gt; b, Awari.player p);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Collections.FSharpList`1&lt;int32&gt; play(class Microsoft.FSharp.Collections.FSharpList`1&lt;int32&gt; b, Awari/player p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Collections.FSharpList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="Microsoft.FSharp.Collections.FSharpList&lt;System.Int32&gt;" />
        <Parameter Name="p" Type="Awari+player" />
      </Parameters>
      <Docs>
        <param name="b">The initial board</param>
        <param name="p">The player who starts</param>
        <summary>
 Play game until one side is empty
 </summary>
        <returns>A new board after one player has won</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="printBoard">
      <MemberSignature Language="C#" Value="public static void printBoard (Microsoft.FSharp.Collections.FSharpList&lt;int&gt; b);" />
      <MemberSignature Language="ILAsm" Value=".method public static void printBoard(class Microsoft.FSharp.Collections.FSharpList`1&lt;int32&gt; b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="Microsoft.FSharp.Collections.FSharpList&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="b"> A board to be printed </param>
        <summary>
 Print the board
 </summary>
        <returns>() - it just prints</returns>
        <remarks>
 Output is for example,
 <code>
      3  3  3  3  3  3
   0                    0
      3  3  3  3  3  3
 </code>
 where player 1 is bottom row and rightmost home
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="turn">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Collections.FSharpList&lt;int&gt; turn (Microsoft.FSharp.Collections.FSharpList&lt;int&gt; b, Awari.player p);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Collections.FSharpList`1&lt;int32&gt; turn(class Microsoft.FSharp.Collections.FSharpList`1&lt;int32&gt; b, Awari/player p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Collections.FSharpList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="Microsoft.FSharp.Collections.FSharpList&lt;System.Int32&gt;" />
        <Parameter Name="p" Type="Awari+player" />
      </Parameters>
      <Docs>
        <param name="b">The present state of the board</param>
        <param name="p">The player, whose turn it is</param>
        <summary>
 Interact with the user through getMove to perform a possibly repeated turn of a player
 </summary>
        <returns>A new board after the player's turn</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
