{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;\cssrgb\c0\c0\c0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 From: Jon Sporring <jrh630@ku.dk>\
Subject: Reeksamen i Programmering og probleml\'f8sning\
Date: 24 February 2017 at 10.36.19 GMT+1\
To: Martin Petersen <martin_westh@hotmail.com>\
Cc: Christina Lioma <c.lioma@di.ku.dk>, Torben \'c6gidius Mogensen <torbenm@di.ku.dk>, Stefan Sommer <sommer@di.ku.dk>, SCI-UDD-projekt-fastholdelse <projekt-fastholdelse@science.ku.dk>\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf2 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Hej Martin et al.,\
\
Reeksamen i Programmering og probleml\'f8sning er programsat til perioden 19.-21. april. F\'f8lgende brev t\'e6nkes sendt til dem, som har tilmeldt sig, s\'e5 snart vi f\'e5r tilmeldingslisten. Ifald mange melder sig, vil vi nok lave flere versioner, hvor vi fordeler eksaminanterne over flere dage.\
\
"K\'e6re eksaminant\
\
Jeg skriver til dig, fordi du er tilmeld reeksamen i Programmering og probleml\'f8sning. Eksamen vil blive afholdt i periode onsdag d. 19/4 til fredag d. 20/4, og eksamensformen er\
\
\'a030 minutters mundtlig eksamen (inklusive bed\'f8mmelse, uden forberedelse) i fuldt pensum. Skriftlige hj\'e6lpemidler (notater og b\'f8ger mv.) er tilladt.\
\
Du vil blive bed\'f8mt best\'e5et eller ikke best\'e5et. \
\
Selve eksamensdagen kommer til at forl\'f8be som f\'f8lger: Du skal m\'f8de p\'e5 eksamensdagen udenfor\
\
\'a0<To be announced>, onsdag d. 19/4 kl. 9:45\
\
og skrive dig p\'e5 deltagerlisten, som vil v\'e6re oph\'e6ngt udenfor lokalet. Fra kl. 10:00 vil 2 l\'e6rer (Torben Mogensen, Christina Lioma, eller Jon Sporring) eksaminere i den r\'e6kkef\'f8lge, som listen angiver, og n\'e5r vi er n\'e5et igennem listen, eller for onsdags vedkommende hvis klokken er over kl. 17:00, vil dagens eksamination v\'e6re afsluttet. \
\
Eksaminationen kommer til at tage omkring 30 minutter og forl\'f8be som f\'f8lger:\
\
\'a01. Den studerende tr\'e6kker et af de nedenst\'e5ende 6 emner\
\'a02. Den studerende fort\'e6ller op til 15 minuter om emnet\
\'a03. L\'e6rer og studerende diskuterer i ca. 10 minuter om emner fra det fulde pensum\
\'a04. Den studerende forlader lokalet, l\'e6rerne voterer, og giver den studerende besked om resultatet.\
\
De 6 emner, du kan tr\'e6kke, er:\
\
\'a01. Funktionsprogrammering: Funktioner, Simple og sammensatte typer: Giv en kort beskrivelse af begreberne funktion og type, og forklar hvad forskellen mellem simple typer og sammensatte typer (compound types). \'a0Giv eksempler p\'e5 funktionsdefinitioner og forklar hvad rekursion er. Giv eksempler p\'e5 alle ovenst\'e5ende emner og hvordan de kan bruges sammen.\
\
\'a02. Funktionsprogrammering: Lister, m\'e6ngder, afbildninger (maps): Beskriv datatyperne list, endelige m\'e6ngder (finite sets) og afbildninger (maps), og beskrive deres tilh\'f8rende hyppigt anvendte operatorer. Sammenlign deres ligheder og forskelle ud fra eksempler.\
\
\'a03. Funktionsprogrammering: Tr\'e6er (finite trees): Beskriv datatypen tr\'e6er, giv eksempler p\'e5 hvordan tr\'e6er defineres og benyttes, hvordan funktioner der tager tr\'e6er som argumenter erkl\'e6res. Giv eksempler p\'e5, hvordan bin\'e6re tr\'e6er kan genneml\'f8bes og diskuter deres forskelle.\
\
\'a04. Imperative programmering: Variable, sekventiel eksekvering og arrays: Beskriv forskellen mellem v\'e6rdier og variable. Beskriv hvordan imperativ programmering kan genneml\'f8be en liste uden brug af rekursion. Diskuter forskellen mellem funktions- og imperativ programmeringsparadigmet.\
\
\'a05. Objektorienteret programmering: Objektorienteret modellering: Beskriv hvordan man strukturerer en l\'f8sning af et problem ved brug af den objektorienteret designprocess. Giv et eksempel og diskuter eventuelle fordele og ulemper ved denne metode.\
\
\'a06. Objektorienteret programmering: Nedarvning: Beskriv begrebet nedarvning i den objektorienteret programmerings og designmetode, og diskuter fordele og ulemper ved at strukturere et program der g\'f8r brug af nedarvning.\
\
Held og lykke, Jon"}