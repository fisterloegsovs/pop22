Programmering og problemløsning

—————————————————————————————————————
20160923
22. For og while løkker
23. Betingede udtryk
24. Rekursive funktioner

Jeg nåede hertil!

13. Currying
let mul x y = x*ylet timesTwo = mul 2.0 
printfn "%g" (mul 5.0 3.0) 
printfn "%g" (timesTwo 3.0)

25. Gensidigt rekursive funktioner

11. Anonyme funktioner
let first = fun x y -> x 
printfn "%d" (first 5 3)

12. Funktioner som argument
let apply f x y = f x ylet mul = fun a b -> a * b 
printfn "%d" (apply mul 3 6)

14. Forskel på funktioner og procedure
15. Brugerdefinerede operatorer
19. Sideeffekter

—————————————————————————————————————
20160920
9. Printf funktionerne, placeholder, 

16. Variable (mutable, <-)
17. Dynamisk virkefelt
let testScope x =  let mutable a = 3.0 
  let f z = a * z  a <- 4.0  f xprintfn "%A" (testScope 2.0)

10. Leksikal scope 
let testScope x = 
  let a = 3.0  let f z = a * z 
  let a = 4.0  f xprintfn "%A" (testScope 2.0)

18. Variable som returværdier (ref, !, :=)
let x = ref 0 
printfn "%d" !x 
x := !x + 1 
printfn "%d" !x

20. Kommentarer
21. Kommentarstandarden, xml, html, og C# notation

—————————————————————————————————————
3.1

1. værdibinding, letvægtssyntaks
let name = "World" in do printfn "Hello %A" name
// Bemærk at bindingsnavne skal starte med et bogstav men kan derudover være næsten alt pånær nøgleord (Tabel 6.1) 

//letvægts
let name = "World"
do printfn "Hello %A" name

//letvægts, do er valgfrit
let name = "World"
printfn "Hello %A" name

2. sekvenser, 
let name = "World" in do printfn "Hello %A" name; do printfn "Goodbye %A" name

let name = "World" 
do printfn "Hello %A" name
printfn "Goodbye %A" name

2. virkefelter:
let name = "World" in let name = "Jon" in do printfn "Hello %A" name

// navne kan ikke overskrives i yderste virkefelt
let name = "World" 
let name = "Jon"
do printfn "Hello %A" name

// navne kan god overskrives i dybere virkefelt
(
  let name = "World" 
  let name = "Jon"
  do printfn "Hello %A" name
)

// bindinger i dybere virkefelter slettes, når der vendes tilbage
let greeting = "World" 
do printfn "%A" greeting
(
  let name = "Jon"
  do printfn " %A" name
)
do printfn "%A %A" greeting name

3. Ikke-rekursive funktionsbindinger, typespecifikation og typeinferens, hvor skal parenteserne stå?

let greetings (name : string) : string = "Hello " + name
let str = greetings "Jon"
do printfn "%A" str
// Bemærk funktionstype: val greetings : name:string -> string

// Typer bliver infereret i scriptblokke:
let greetings name = "Hello " + name
let str = greetings "Jon"
do printfn "%A" str
// Bemærk typer kan være partielt specificeret, parenteser er derfor nødvendige, for hvad ville
//  let greetings name : string
// betyde?

// Hvilken type har:
let sum x y = x + y
// Kan bruges i
let sum x y = x + y in do printfn "%A + %A = %A" 3 4 (sum 3 4)

// Hvad med
let sum x y = x + y in do printfn "%A + %A = %A" 3.0 4.0 (sum 3.0 4.0)

// Hvad så med
let sum x y = x + y 
do printfn "%A + %A = %A" 3 4 (sum 3 4)
do printfn "%A + %A = %A" 3.0 4.0 (sum 3.0 4.0)

4. Generiske funktioner
let second a b = b
do printfn "second %A %A = %A" 3 4 (second 3 4)
do printfn "second %A %A = %A" 3.0 4.0 (second 3.0 4.0)

5. Funktioner, der indeholder værdibindinger og funktionsbindinger
// a * x**2 + b * x + c = 0
let solution a b c sgn =
  let discriminant a b c =
    b ** 2.0 - 2.0 * a * c
  let d = discriminant a b c
  (-b + sgn * sqrt d) / (2.0 * a)
// Bemærk sidste udtryk skal være en værdi

—————————————————————————————————————
2.3

Operatorer: +, -, *, /, %, **. For heltal, flydende kommatal, tegn og strenge
3 + 4
3.0 + 4.0
3 + 4.0
5 / 2
5 % 2
2 * (5 / 2) + 5 % 2
2.0 ** 3.0
pown 2 3
"hej " + "med " + "dig"

Præcedens: Vis tabel 5.4
exp 0.0
exp 1.0
exp 0.0 + 1.0

Casting og afrunding
float 3
int 3.2
int 3.6
int (3.2 + 0.5)
int (3.6 + 0.5)
int 'a'
int 'A'
char 65
char (int 'c' - int 'a' + int 'A')
char (int 'c' -int 'a' + int 'A') // unary minus

Unære versus binære operatorer:
2 - 3
-3
- 3
char (int 'c' + -int 'a' + int 'A')

Strenge, streng indicering og slicing, verbatim
"abcdefghijkl".[1]
"abcdefghijkl".[1..4]
"abcdefghijkl".[..4]
"abcdefghijkl".[4..]
"abcdefghijkl".Length
"abcdefghijkl".[0..11]

Bolsk algebra, sandhedstabeller
Sand = 1
Falsk = 0
a && b // som gange
a || b // som plus
not a

Sammenligningsoperatorer.
3 < 4
3 > 4
3 <> 4
3 = 4
not (3 = 4)
not 3 = 4 // funktionspræcedens!

—————————————————————————————————————
2.2
Husk at sige:
  Aflevering 2i skal skrives i latex for at øve tabeller etc.
  Der er en fejl i tabel 5.1
  Emacs Workshop

7. Bits, bytes, heltal. Talsystemer, base-sum formel. Binær: division med 2 algoritme. Hexadecimal, oktal.

10-talsystemet vs. 2-talsystemet (lav tabel med 1 ~ 10^0, 10 ~ 10^1, …)
Del-med-2 algoritmen

8. Flydende tal, tegn
Flydende tal. 

ASCII vs. UTF8. Tegn og strenge, escape-sekvenser

Literaler, vis Tabel 5.3 

—————————————————————————————————————
2.1
1. Aflevering af 1g
2. Opgave 2i, kort gennemgang, hjemmeside med beskrivelsen af reglerne
3. Demonstration af at starte fsharpi i windows og osx inkl. path
4. Hvordan lærer man at programmere? Vælg et sprog, lær sproget, øvelse gør mester, brug det i praksis.
5. Hvordan løser man et problem: Forstå, design, implementer, reflekter
6. Filendelser: .fsx, fsscript, .exe, .fs, .fsi. Kørsel af fsharp på Windows og OSX, fsharpi, fsharpc+mono, 

Fsharp som lommeregner:
357
864
357+864

Gem og hent værdier:
let a = 357let b = 864let c = a + bdo printfn "%A" c

";;" i interaktiv modus
"&&" notation

Typer: 3, 3.0, '3', "3", 3e0, 3.0e0. Vis Tabel 5.1

—————————————————————————————————————
1.3
Terminal:
Forskel mellem Windows, MacOS, og Linux
dir/ls, cd, cp/copy, mkdir, rmdir, del/rm, echo

Emacs:
crtl. vs. meta, menuer, dele vinduer

Latex:
minimal, simple, advanced.

—————————————————————————————————————
1.2
Scratch
1. Kamera
2. Walking med variabel retning
3. Collect Laptops (deligering af ansvar)
4. Space landing, demo

Pointer:
1. Veldefineret tilstand ved start (Walking, første kommandoer bør være at flytte til startsted og start retning)
2. Delegering og lokale versus globale variable. (Collect …: Skal score være i Laptops eller i Octopus?  Hvem har brug for viden, og hvem kunne have glæde af viden om score?)
3. Event drevent eller if-then-else loop: Hvad giver det “simpleste” program. Hvilke parametre kan vi bruge til at vurdere simplicitet?

—————————————————————————————————————
1.1
Velkommen (Martin, Christina, Jon (kursusansvarlig), instruktorer)
Hvad skal vi lærer (imperativ-, funktions- og objektorienteret programmering)
Oversigt over kurset (Canvas, kurser.ku.dk, øvelseshold, lokaler, grupper, scratch, fsharp, opgaver, ugesedler og aflevering)
God opførsel på forum, chat, forelæsninger, øvelser, grupper

Læs 1g

Imperativ programmering:

Kageopskrift er et program
Tælleopskrift, timing af 2 måder (sekventielt eller parallelt)
Scratch:
1. Hello (sprite, say, mouse, loop)
2. Count (variables, wait)
3. Walking (costumes, touching, direction, if-then)
4. MoveToMouse (clone)
5. Bat bounce (putting it all together)

